(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{"./docs/explore/duplex-type-and-duplex-field.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),o=t.n(a),p=t("./node_modules/@mdx-js/tag/dist/index.js");function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},p=Object.keys(e);for(a=0;a<p.length;a++)t=p[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)t=p[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}n.default=function(e){var n=e.components;s(e,["components"]);return o.a.createElement(p.MDXTag,{name:"wrapper",components:n},o.a.createElement(p.MDXTag,{name:"h1",components:n,props:{id:"complex-input-types-with-duplexobjecttype-and-duplexfield"}},"Complex input types with ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h1"},"@DuplexObjectType")," and ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h1"},"@DuplexField")),o.a.createElement(p.MDXTag,{name:"p",components:n},"Sometimes we'd like to define a single type as both input and output object type. That's where DuplexObjectType comes in. Of course you only want to take a subset of all fields as input-so just mark those that you don't want in the input as regular ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"@Field()"),"."),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import {\n  DuplexObjectType,\n  Field,\n  DuplexField,\n  Arg,\n  InputObjectType,\n  Mutation,\n} from 'decapi'\n\n@DuplexObjectType()\nclass User {\n  @DuplexField()\n  name: string\n  @Field()\n  password_hash: string\n}\n\n@Schema()\nclass SuperSchema {\n  @Mutation()\n  createUser(data: User): User {\n    // now we can use a single class as input and output type\n    const u = new User()\n    u.name = data.name\n    u.password_hash = bcrypt.hashSync('bacon')\n    return u\n  }\n}\n")))}}}]);