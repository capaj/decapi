(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{"./docs/getting-started/what-is-decapi.mdx":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),o=a.n(t),r=a("./node_modules/@mdx-js/tag/dist/index.js");function l(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}n.default=function(e){var n=e.components;l(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"decapi")," is set of decorators allowing creating GraphQL APIs quickly and in type-safe way."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"minimal-example"}},"Minimal Example"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Schema able to handle such query:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-graphql"}},'{\n  hello {\n    world(name: "Bob") # will resolve with `Hello world, Bob`\n  }\n}\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"Can be created with:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import { Schema, Query, ObjectType, Field, compileSchema } from 'decapi'\n\n@ObjectType()\nclass Hello {\n  @Field()\n  world(name: string): string {\n    return `Hello world, ${name}!`\n  }\n}\n\n@Schema()\nclass MyFirstSchema {\n  @Query()\n  hello(): Hello {\n    return new Hello()\n  }\n}\n\nconst schema = compileSchema(MyFirstSchema)\n")))}}}]);