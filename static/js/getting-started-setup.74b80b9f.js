(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"./docs/getting-started/setup.mdx":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),o=a.n(t),p=a("./node_modules/@mdx-js/tag/dist/index.js");function r(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},p=Object.keys(e);for(t=0;t<p.length;t++)a=p[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(t=0;t<p.length;t++)a=p[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}n.default=function(e){var n=e.components;r(e,["components"]);return o.a.createElement(p.MDXTag,{name:"wrapper",components:n},o.a.createElement(p.MDXTag,{name:"h1",components:n,props:{id:"installation-and-setup"}},"Installation and setup"),o.a.createElement(p.MDXTag,{name:"p",components:n},"Firstly, add ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"decapi")," to your project"),o.a.createElement(p.MDXTag,{name:"p",components:n},o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"yarn add decapi graphql reflect-medatada")),o.a.createElement(p.MDXTag,{name:"p",components:n},o.a.createElement(p.MDXTag,{name:"strong",components:n,parentName:"p"},"Important!")," To work with ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"typescript"),", you'll need ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"reflect-medatada")," so ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"decapi")," can infer types from your code."),o.a.createElement(p.MDXTag,{name:"p",components:n},"Add ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},'import "reflect-metadata";')," somewhere in bootstrap (before any ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"decapi")," decorator is used) of your app eg ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"app/index.ts"),"."),o.a.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"modify-tsconfigjson"}},"Modify ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"tsconfig.json")),o.a.createElement(p.MDXTag,{name:"p",components:n},o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"decapi")," will try to infer types of your fields, when possible. To allow this, you'll have to add following to your ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"tsconfig.json")," ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"compilerOptions")," section:"),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre"},'"emitDecoratorMetadata": true,\n"experimentalDecorators": true,\n')),o.a.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"does-decapi-work-without-typescript"}},"Does ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"decapi")," work without typescript?"),o.a.createElement(p.MDXTag,{name:"p",components:n},"It absolutely does. Keep in mind, however - without typescript all types will have to be defined explicitly."))}}}]);