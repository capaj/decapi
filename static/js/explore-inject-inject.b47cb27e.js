(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"./docs/explore/inject/Inject.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),o=t.n(a),r=t("./node_modules/@mdx-js/tag/dist/index.js");function m(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}n.default=function(e){var n=e.components;m(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"injecting-value-to-resolver"}},"Injecting value to resolver"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Quite often we need to have access to graphql context inside resolver. Common example could be field like ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"viewer")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-graphql"}},"{\n  viewer {\n    me {\n      username\n    }\n  }\n}\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"built-in-injectors-context-source-info"}},"Built-in injectors ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"@Context"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"@Source"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"@Info")),o.a.createElement(r.MDXTag,{name:"p",components:n},"There are 3 argument decorators in ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"decapi")," that allow passing values to resolvers - ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"@Context"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"@Source"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"@Info")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Implementation of ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Viewer")," type would use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"@Context")," decorator to get user id from graphql context and could look like:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import { ObjectType, Field, Context } from 'decapi'\n\n@ObjectType()\nclass Viewer {\n  @Field({ type: () => Person })\n  me(@Context context) {\n    return db.findUserById(context.currentUser.id)\n  }\n  @Field()\n  id: number\n}\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"custom-injector-with-inject"}},"Custom injector with ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"@Inject")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Beside built-in injectors you can use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"@Inject")," decorator to pass any value to given argument."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"@Inject")," decorator requires getter function that converts resolve info to any arbitral value. ",o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"Note you can return promise of any value, too"),"."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import { ObjectType, Field, Inject } from 'decapi';\n\n@ObjectType()\nclass Viewer {\n  @Field({ type: () => Person })\n  me(@Inject({source, args, context, info} => 42) someNumber: number): number {\n    return someNumber; // it will be 42;\n  }\n  @Field() id: number;\n}\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"notes"}},"Notes"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Decorated arguments are not present in ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"args")," list of field schema definition.")))}}}]);