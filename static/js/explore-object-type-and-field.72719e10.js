(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"./docs/explore/object-type-and-field.mdx":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),o=a.n(t),r=a("./node_modules/@mdx-js/tag/dist/index.js");function c(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}n.default=function(e){var n=e.components;c(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"object-types"}},"Object types"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Object types are main building block of any graphql schema. In ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"decapi")," - ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"ObjectType")," is equivalent to ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"GraphQLObjectType"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"To define new object type, decorate any class with ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"@ObjectType")," decorator."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import { ObjectType } from 'decapi'\n\n@ObjectType()\nclass MyType {\n  // fields will be defined here\n}\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"fields"}},"Fields"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Every ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"ObjectType")," must have at least one field. To create new field, decorate any property or method of ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"ObjectType")," class with ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"@Field")," decorator:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import { ObjectType, Field } from 'decapi'\n\n@ObjectType()\nclass MyType {\n  @Field()\n  foo: string\n\n  @Field()\n  fooMethod(): string {\n    return 'fooMethodResult'\n  }\n}\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"nested-sub-types"}},"Nested Sub-types"),o.a.createElement(r.MDXTag,{name:"p",components:n},"To build nested structure of objects - every field can use another ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"ObjectType")," as it's type"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import { ObjectType, Field } from 'decapi'\n\n@ObjectType()\nclass Location {\n  constructor(lat: number, lng: number) {\n    this.lat = lat\n    this.lng = lng\n  }\n\n  @Field()\n  lat: number\n  @Field()\n  lng: number\n}\n\n@ObjectType()\nclass Restaurant {\n  @Field()\n  name: string\n\n  @Field()\n  location(): Location {\n    return new Location(50, 50)\n  }\n}\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"circular-type-references"}},"Circular type references"),o.a.createElement(r.MDXTag,{name:"p",components:n},"In other to define circular references. Eg. car have owner, owner has cars which have owner. it's required to assign types in lazy way (with getter functions)"),o.a.createElement(r.MDXTag,{name:"p",components:n},"To do so, we'll use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"@Field")," with ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"type")," option."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import { ObjectType, Field } from 'decapi'\n\n@ObjectType()\nclass Car {\n  @Field({ type: () => Person })\n  owner() {\n    return db.findPersonByCarId(this.id)\n  }\n  @Field()\n  id: number\n}\n\n@ObjectType()\nclass Person {\n  @Field()\n  id: number\n  @Field()\n  name: string\n  @Field({ type: () => Car })\n  car() {\n    return db.findCarByOwnerId(this.id)\n  }\n}\n")))}}}]);