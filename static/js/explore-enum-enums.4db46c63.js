(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"./docs/explore/enum/enums.mdx":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),r=a.n(t),s=a("./node_modules/@mdx-js/tag/dist/index.js");function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}n.default=function(e){var n=e.components;o(e,["components"]);return r.a.createElement(s.MDXTag,{name:"wrapper",components:n},r.a.createElement(s.MDXTag,{name:"h1",components:n,props:{id:"enums"}},"Enums"),r.a.createElement(s.MDXTag,{name:"p",components:n},"For enums we can work with native Typescript enum keyword like"),r.a.createElement(s.MDXTag,{name:"pre",components:n},r.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"enum TaskType {\n  Done,\n  InProgress,\n  Finished,\n  Cancelled,\n}\n")),r.a.createElement(s.MDXTag,{name:"p",components:n},"The only thing is required is registering such enum with it's name, so schema compiler is aware of it (as under the hood, enum is plain key-value object)."),r.a.createElement(s.MDXTag,{name:"pre",components:n},r.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import { registerEnum } from 'decapi'\n\nenum TaskType {\n  Done,\n  InProgress,\n  Finished,\n  Cancelled,\n}\n\nregisterEnum(TaskType, { name: 'TaskType' })\n")),r.a.createElement(s.MDXTag,{name:"p",components:n},"Now, to use such enum in query like:"),r.a.createElement(s.MDXTag,{name:"pre",components:n},r.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-graphql"}},"query {\n  currentUser {\n    hasAnyTaskOfType(type: Done)\n  }\n}\n")),r.a.createElement(s.MDXTag,{name:"p",components:n},r.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"User")," type would be defined as:"),r.a.createElement(s.MDXTag,{name:"pre",components:n},r.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import { ObjectType, Field, registerEnum } from 'decapi'\n\nenum TaskType {\n  Done,\n  InProgress,\n  Finished,\n  Cancelled,\n}\n\nregisterEnum(TaskType, { name: 'TaskType' })\n\n@ObjectType()\nclass User {\n  @Field()\n  id: number\n\n  @Field()\n  hasAnyTaskOfType(type: TaskType): boolean {\n    return tasksService.hasTasksOfType(type)\n  }\n}\n")))}}}]);