// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Field IFieldOptions should be able cast result as array of classes 1`] = `
Object {
  "bar": "castedFromAQuery",
  "castedFieldAsArray": Array [
    Object {
      "bar": "castedFromAField11",
    },
    Object {
      "bar": "castedFromAField21",
    },
  ],
}
`;

exports[`Field IFieldOptions should cast POJO by default 1`] = `
Object {
  "castedQuery": Object {
    "bar": Object {
      "bazChild": "field bazChild test value",
    },
  },
}
`;

exports[`Field IFieldOptions should print as expected 1`] = `
"type Query {
  castedQuery: Foo
}

type Foo {
  bar: String!
  deprecated: String! @deprecated(reason: \\"obsolete\\")
  castedField: Foo
  castedFieldDefinedAsThunk: Foo
  castedFieldNullReturning: Foo
  castedFieldUndefinedReturning: Foo
  castedFieldAsArray: [Foo!]!
  castedFieldAsArrayDefinedAsThunk: [Foo!]!
  castedArrayFieldDefinedAsThunk: [Foo!]!
  castedArrayField: [Foo!]!
  castedFieldAsArrayWithBadReturnValue: [Foo!]!
  fieldWithExplicitJSONType: JSON!
  fieldWithExplicitScalarArrayType: [Date!]!
}

\\"\\"\\"
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
\\"\\"\\"
scalar JSON @specifiedBy(url: \\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\\")

\\"\\"\\"
A date string, such as 2007-12-03, compliant with the \`full-date\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
\\"\\"\\"
scalar Date"
`;

exports[`Field IFieldOptions should register a field with an explicit type 1`] = `
Object {
  "bar": "castedFromAQuery",
  "castedArrayField": Array [
    Object {
      "bar": "castedFromAField14",
    },
    Object {
      "bar": "castedFromAField24",
    },
  ],
  "castedField": Object {
    "bar": "castedFromAField",
  },
  "castedFieldAsArrayDefinedAsThunk": Array [
    Object {
      "bar": "castedFromAField12",
    },
    Object {
      "bar": "castedFromAField22",
    },
  ],
  "castedFieldDefinedAsThunk": Object {
    "bar": "castedFromAField",
  },
  "castedFieldNullReturning": null,
  "castedFieldUndefinedReturning": Object {
    "bar": "baz",
  },
  "fieldWithExplicitJSONType": Object {
    "baz": "foo",
  },
  "fieldWithExplicitScalarArrayType": Array [
    "2019-01-01",
  ],
}
`;

exports[`Field Throws if pointing to unregistered type 1`] = `
"class Foo {
        } cannot be used as a resolve type because it is not an @ObjectType"
`;
